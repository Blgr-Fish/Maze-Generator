from math import *
#from Maze_Generator import *

from turtle import *

def turtle_truc(n,G):
    setworldcoordinates(0, 0, n, n)
    speed(5) 
    maze_completed = False
    
    etape = 0
    key_list = list(G.keys())
    val_list = list(G.values())
    longueur = n
    list_coord = []
    while True:
        while etape == 0 : # on  définit les contours du labyrinthe
            pd()
            forward(longueur)
            left(90)
            
  
        
        
            if abs(pos()) < 1 :
                etape +=1
                
             
                

        while etape == 1 : # on créé les parois intérieurs du labyrinthe
            for i in range(int(n)):
                setx(0)
                sety(0)
                setheading(0)
                forward(i)
                left(90)
                forward(n)
            for j in range (int(n)) :
                setx(0)
                sety(0)
                setheading(90)
                forward(j)
                right(90)
                forward(n)
            etape += 1
                   
               
        while etape == 2 :
            for i in range(len(G)):
                for j in range(len(G)):
                    if key_list[i] in val_list[j]:
                        pencolor('white')
                        
                        if key_list[i][1]+1 == n:
                            pu()
                            setpos(key_list[j][0],key_list[j][1])
                            pd()
                            setpos(key_list[i][0],key_list[i][1])
                            pu()
                        else:
                            pu()
                            setpos(key_list[i][0],key_list[i][1]+1)
                            pd()
                            setpos(key_list[j][0],key_list[j][1]+1)
                            pu()


                        print(key_list[i],"est relié à ", key_list[j])
                        
                
            
            etape += 1

            while etape == 2 :
                etape +=1
                pass
 
            
        
                        
        break
    done()
            

G = {(0, 0): [(1, 0), (0, 1)], (0, 1): [(0, 2)], (0, 2): [(0, 3), (0, 1), (0, 3)], (0, 3): [], (1, 0): [(2, 0)], (1, 1): [(0, 1), (1, 2), (1, 0), (1, 2), (0, 1), (2, 1)], (1, 2): [(2, 2), (0, 2), (1, 1), (1, 3), (0, 2), (2, 2), (0, 2), 
(0, 2)], (1, 3): [(0, 3), (1, 2)], (2, 0): [(3, 0)], (2, 1): [(2, 2), (2, 0), (3, 1)], (2, 2): [(1, 2), (2, 3)], (2, 3): [(2, 2), (1, 3), (2, 2), (2, 2), (1, 3)], (3, 0): [(3, 1), (3, 1)], (3, 1): [(2, 1)], (3, 2): [(3, 3), (3, 1), 
(3, 3)], (3, 3): [(2, 3), (2, 3)]}

F = {(0, 0): [(1, 0)], (0, 1): [(1, 1)], (1, 0): [(1, 1), (0, 0)], (1, 1): [(1, 0), (0, 1)]}          

E = {(0, 0): [(0, 1)], (0, 1): [(0, 2), (0, 0), (1, 1)], (0, 2): [(1, 2), (0, 1), (0, 1)], (1, 0): [(2, 0), (2, 0)], (1, 1): [(0, 1), (1, 2), (1, 2)], (1, 2): [(0, 2), (2, 2), (1, 1), (0, 2)], (2, 0): [(2, 1), (2, 1), (1, 0)], (2, 1): [(2, 0), (2, 2)], (2, 2): [(2, 1), (1, 2), (1, 2)]}

B = {(0, 0): [(1, 0)], (0, 1): [(0, 2)], (0, 2): [(0, 3), (1, 2), (0, 1)], (0, 3): [(0, 2), (1, 3), (0, 4)], (0, 4): [(0, 3), (1, 4)], (1, 0): [(0, 0), (2, 0), (1, 1)], (1, 1): [(2, 1), (1, 2), (1, 0)], (1, 2): [(0, 2), (1, 3), (1, 1)], (1, 3): [(0, 3), (1, 2), (2, 3), (1, 4)], (1, 4): [(2, 4), (0, 4), (1, 3)], (2, 0): [(2, 1), (1, 0), (3, 0)], (2, 1): [(2, 0), (2, 2), (1, 1), (3, 1)], (2, 2): [(3, 2), (2, 1)], (2, 3): [(3, 3), (2, 4), (1, 3)], (2, 4): [(1, 4), (2, 3), (3, 4)], (3, 0): [(4, 0), (2, 0), (3, 1)], (3, 1): [(3, 2), (4, 1), (2, 1), (3, 0)], (3, 2): [(2, 2), (4, 2), 
(3, 3), (3, 1)], (3, 3): [(2, 3), (4, 3), (3, 2), (3, 4)], (3, 4): [(2, 4), (3, 3)], (4, 0): [(3, 0), (4, 1)], (4, 1): [(4, 0), (3, 1)], (4, 2): [(4, 3), (3, 2)], (4, 3): [(4, 2), (3, 3), (4, 4)], (4, 4): [(4, 3)]} 
print(turtle_truc(sqrt(len(F)),F))

"""A = Graphe_dictionnaire()
A.creer_graphe_nxn(10)
A.fusion_aleatoire()"""

E = {(0, 0): [(0, 1)], (0, 1): [(0, 2), (0, 0), (1, 1)], (0, 2): [(1, 2), (0, 1), (0, 1)], (1, 0): [(2, 0), (2, 0)], (1, 1): [(0, 1), (1, 2), (1, 2)], (1, 2): [(0, 2), (2, 2), (1, 1), (0, 2)], (2, 0): [(2, 1), (2, 1), (1, 0)], (2, 1): [(2, 0), (2, 2)], (2, 2): [(2, 1), (1, 2), (1, 2)]}

#print(turtle_truc(sqrt(a),a))
